rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 사용자 문서 규칙
    match /users/{userId} {
      // 사용자는 자신의 문서만 읽고 쓸 수 있음
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // 그룹 문서 규칙
    match /groups/{groupId} {
      // 그룹 멤버만 읽을 수 있음
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.members;
      
      // 그룹 생성은 인증된 사용자만 가능
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.createdBy &&
        request.auth.uid in request.resource.data.members;
      
      // 그룹 업데이트는 멤버만 가능 (멤버 추가/제거, 목표 변경)
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.members;
      
      // 그룹 삭제는 생성자만 가능
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
    }
    
    // 운동 기록 문서 규칙
    match /exerciseRecords/{recordId} {
      // 같은 그룹 멤버만 읽을 수 있음
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
      
      // 자신의 운동 기록만 생성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.members;
      
      // 자신의 운동 기록만 수정/삭제 가능
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // 주간 통계 문서 규칙
    match /weeklyStats/{statId} {
      // 같은 그룹 멤버만 읽을 수 있음
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
      
      // 자신의 통계만 생성/수정 가능
      allow create, update: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // 자신의 통계만 삭제 가능
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // 벌칙 문서 규칙
    match /penalties/{penaltyId} {
      // 같은 그룹 멤버만 읽을 수 있음
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members;
      
      // 시스템에서만 생성 가능 (실제로는 Cloud Functions에서 처리)
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // 자신의 벌칙만 수정 가능 (완료 상태 변경)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // 반성문 템플릿 규칙 (읽기 전용)
    match /reflectionTemplates/{templateId} {
      allow read: if request.auth != null;
    }
    
    // 알림 문서 규칙
    match /notifications/{notificationId} {
      // 자신의 알림만 읽고 수정 가능
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 알림 생성은 시스템에서만 (Cloud Functions)
      allow create: if request.auth != null;
      
      // 자신의 알림만 삭제 가능
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // 헬퍼 함수들
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isGroupMember(groupId) {
      return exists(/databases/$(database)/documents/groups/$(groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
    }
  }
}
